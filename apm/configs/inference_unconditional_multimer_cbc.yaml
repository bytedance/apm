# Configuration for inference on SE(3) diffusion experiments.
defaults:
  - base
  - inference_base
  - _self_

inference:

  predict_dir: ./ # need to be filled in
  inference_subdir: run_${now:%Y-%m-%d}_${now:%H-%M-%S}
  task: unconditional_multimer_cbc
  seed: 123
  use_gpu: True
  num_gpus: 8

  gpu_memory: 80
  # ckpt_path: ./

  saved_ckpt_dir: ./saved_ckpts/frameflow

  unconditional_multimer_ckpt_path:  ./ # need to be filled in

  also_fold_pmpnn_seq: True # whether to also fold the generated pmpnn seq for each structure
  write_sample_trajectories: False # whether to also save the trajectory of the generation process

  shift_bias: 1

  interpolant:
    min_t: 1e-2
    provide_kappa: False
    codesign_separate_t: False

    rots:
      corrupt: True
      sample_schedule: exp
      exp_rate: 10
      batch_ot: True
      train_schedule: ${inference.interpolant.rots.sample_schedule}

    trans:
      corrupt: True
      pre_align: True
      train_schedule: linear
      sample_schedule: linear
      sample_temp: 1.0
      potential: null
      potential_t_scaling: False
      rog:
        weight: 20.0
        cutoff: 5.0
      
    aatypes:
      corrupt: True
      schedule: linear
      schedule_exp_rate: -3
      temp: 0.1
      noise: 20.0
      do_purity: True
      interpolant_type: masking
    
    torsions:
      corrupt: True

    sampling:
      num_timesteps: 500
      do_sde: False

    self_condition: True

  # Directory of software, weights, and outputs.  
  pmpnn_dir: ./ProteinMPNN

  folding:
    seq_per_sample: 8
    folding_model: esmf
    own_device: False
    pmpnn_path: ./ProteinMPNN/
    pt_hub_dir: pt_hub_dir
    colabfold_path: path/to/colabfold-conda/bin/colabfold_batch # for AF2
    PLM_dir: offical_ckpts
    PLM: False

  samples:

    # Number of backbone samples per sequence length.
    samples_per_length: 96

    # Batch size when sampling from the model
    num_batch: 1

    # Subset of lengths to sample. If null, sample all targets.
    # length_subset: null
    length_subset: [[50, 100],] #, [100, 50], [100, 100], [100, 200], [200, 100], [200, 50], [50, 200], [100, 300], [300, 100]]
